for(i in index){
vector <- c(vector, keys[i])
}
}
}
result <- c(result, longest(vector))
}
return(result)
}
longest <- function(vector){
result <- vector[which(nchar(vector, type = "chars") == max(nchar(vector))) ]
return(result)
}
findMin <- function(keys, hash){
#finding values minimum
min <- 10e10
for (i in keys){
if(hash[[i]] < min){
min <- hash[[i]]
}
}
result <- c(keys(min), min)
return(result)
}
#input number
number <- "4673123456"
result <- hello(number, hash, names)
result
library('hash')
source('R/functions.R')
#list of all price lists
#Operator A data
operatorA <- data.frame(prefix = c(1, 268, 46, 4620, 468, 4631, 4673, 46732), rate = c(0.9, 5.1, 0.17, 0.0, 0.15, 0.15,0.9, 1.1))
operatorA$operator <- c(rep("A", nrow(operatorA)))
#operator B data
operatorB <- data.frame(prefix = c(1, 44, 46, 467, 48), rate = c(0.92, 0.5, 0.2, 1.0, 1.2))
operatorB$operator <- c(rep("B", nrow(operatorB)))
#list of all price lists
operatorsList <- rbind(operatorA,operatorB)
names <- c("A", "B")
#hash table
hash <- hash(keys = paste(operatorsList$prefix, operatorsList$operator, sep = "-") , values = operatorsList$rate)
keys <- keys(hash)
print(hash["468-A"])
#   loop over operators
#     pattern find countries
#     subset is vector
#       for take the largest match
#           else take the one before
#           find the lowest price
hello <- function(number, hash, names){
prefix <- getPrefix(number)
country <- getCountry(prefix)
area <- getArea(prefix)
keys <- keys(hash)
vector <- character()
result <- character()
for(j in names){
vector <- character()
for(i in 1:nchar(area)){ # for chars in area code
area <- substr(area, 1, nchar(area)-(i-1)) # if not found
pattern <-  paste('^', country, area,"-", j, sep = "")
index = grep(pattern, keys, perl = T)
if(length(index) != 0){
#         result = data[index,]
#         route = result[which(nchar(result$prefix, type = "chars") == max(nchar(result$prefix, type = "chars"))), ]
#         return(route)
#   newHash <- hash(keys= keys(hash(index)), values = hash(index))
for(i in index){
vector <- c(vector, keys[i])
}
}
}
result <- c(result, longest(vector))
}
return(result)
}
longest <- function(vector){
result <- vector[which(nchar(vector, type = "chars") == max(nchar(vector))) ]
return(result)
}
findMin <- function(keys, hash){
#finding values minimum
min <- 10e10
for (i in keys){
if(hash[[i]] < min){
min <- hash[[i]]
}
}
result <- c(keys(min), min)
return(result)
}
#input number
number <- "4673123456"
result <- hello(number, hash, names)
result
library('hash')
source('R/functions.R')
#list of all price lists
#Operator A data
operatorA <- data.frame(prefix = c(1, 268, 46, 4620, 468, 4631, 4673, 46732), rate = c(0.9, 5.1, 0.17, 0.0, 0.15, 0.15,0.9, 1.1))
operatorA$operator <- c(rep("A", nrow(operatorA)))
#operator B data
operatorB <- data.frame(prefix = c(1, 44, 46, 467, 48), rate = c(0.92, 0.5, 0.2, 1.0, 1.2))
operatorB$operator <- c(rep("B", nrow(operatorB)))
#list of all price lists
operatorsList <- rbind(operatorA,operatorB)
names <- c("A", "B")
#hash table
hash <- hash(keys = paste(operatorsList$prefix, operatorsList$operator, sep = "-") , values = operatorsList$rate)
keys <- keys(hash)
print(hash["468-A"])
#   loop over operators
#     pattern find countries
#     subset is vector
#       for take the largest match
#           else take the one before
#           find the lowest price
hello <- function(number, hash, names){
prefix <- getPrefix(number)
country <- getCountry(prefix)
area <- getArea(prefix)
keys <- keys(hash)
vector <- character()
result <- character()
for(j in names){
vector <- character()
for(i in 1:nchar(area)){ # for chars in area code
area <- substr(area, 1, nchar(area)-(i-1)) # if not found
pattern <-  paste('^', country, area,, "$^", "-", j, sep = "")
index = grep(pattern, keys, perl = T)
if(length(index) != 0){
#         result = data[index,]
#         route = result[which(nchar(result$prefix, type = "chars") == max(nchar(result$prefix, type = "chars"))), ]
#         return(route)
#   newHash <- hash(keys= keys(hash(index)), values = hash(index))
for(i in index){
vector <- c(vector, keys[i])
}
}
}
result <- c(result, longest(vector))
}
return(result)
}
longest <- function(vector){
result <- vector[which(nchar(vector, type = "chars") == max(nchar(vector))) ]
return(result)
}
findMin <- function(keys, hash){
#finding values minimum
min <- 10e10
for (i in keys){
if(hash[[i]] < min){
min <- hash[[i]]
}
}
result <- c(keys(min), min)
return(result)
}
#input number
number <- "4673123456"
result <- hello(number, hash, names)
result
keys
pattern <-  paste('^', country, area, "$^", "-", j, sep = "")
index = grep(pattern, keys, perl = T)
pattern <-  paste('^', country, area, "^", "-", j, sep = "")
index = grep(pattern, keys, perl = T)
pattern <-  paste('^', country, area, "^", "-", j, sep = "")
pattern <-  paste('^', country, area, "-", j, sep = "")
pattern <-  paste('^', country, area, "-", "A", sep = "")
pattern <-  paste('^', "46", "73", "-", "A", sep = "")
index = grep(pattern, keys, perl = T)
pattern <-  paste('^', "46", "73", "$^","-", "A", sep = "")
index = grep(pattern, keys, perl = T)
index
pattern <-  paste('^', "46", "73", "\d","-", "A", sep = "")
index = grep(pattern, keys, perl = T)
index
pattern <-  paste('^', "46", "73", "\s" ,"-", "A", sep = "")
index = grep(pattern, keys, perl = T)
pattern <-  paste('^', "46", "73", "\s" ,"-", "A", sep = "")
pattern <-  paste('^', "46", "73", "d" ,"-", "A", sep = "")
index = grep(pattern, keys, perl = T)
index
pattern <-  paste('^', "46", "73","-", "A", sep = "")
index = grep(pattern, keys, perl = T)
index
pattern <-  paste('^', "46", "73", "+d","-", "A", sep = "")
index = grep(pattern, keys, perl = T)
index
pattern <-  paste('^', "46", "7", "+d","-", "A", sep = "")
index = grep(pattern, keys, perl = T)
index
pattern <-  paste('^', "46", "7", "\\d","-", "A", sep = "")
index = grep(pattern, keys, perl = T)
index
pattern <-  paste('^', "46", "7", "+\\d","-", "A", sep = "")
index = grep(pattern, keys, perl = T)
index
library('hash')
source('R/functions.R')
#list of all price lists
#Operator A data
operatorA <- data.frame(prefix = c(1, 268, 46, 4620, 468, 4631, 4673, 46732), rate = c(0.9, 5.1, 0.17, 0.0, 0.15, 0.15,0.9, 1.1))
operatorA$operator <- c(rep("A", nrow(operatorA)))
#operator B data
operatorB <- data.frame(prefix = c(1, 44, 46, 467, 48), rate = c(0.92, 0.5, 0.2, 1.0, 1.2))
operatorB$operator <- c(rep("B", nrow(operatorB)))
#list of all price lists
operatorsList <- rbind(operatorA,operatorB)
names <- c("A", "B")
#hash table
hash <- hash(keys = paste(operatorsList$prefix, operatorsList$operator, sep = "-") , values = operatorsList$rate)
keys <- keys(hash)
print(hash["468-A"])
#   loop over operators
#     pattern find countries
#     subset is vector
#       for take the largest match
#           else take the one before
#           find the lowest price
hello <- function(number, hash, names){
prefix <- getPrefix(number)
country <- getCountry(prefix)
area <- getArea(prefix)
keys <- keys(hash)
vector <- character()
result <- character()
for(j in names){
vector <- character()
for(i in 1:nchar(area)){ # for chars in area code
area <- substr(area, 1, nchar(area)-(i-1)) # if not found
pattern <-  paste('^', country, area, "+\\d", "-", j, sep = "")
index = grep(pattern, keys, perl = T)
if(length(index) != 0){
#         result = data[index,]
#         route = result[which(nchar(result$prefix, type = "chars") == max(nchar(result$prefix, type = "chars"))), ]
#         return(route)
#   newHash <- hash(keys= keys(hash(index)), values = hash(index))
for(i in index){
vector <- c(vector, keys[i])
}
}
}
result <- c(result, longest(vector))
}
return(result)
}
longest <- function(vector){
result <- vector[which(nchar(vector, type = "chars") == max(nchar(vector))) ]
return(result)
}
findMin <- function(keys, hash){
#finding values minimum
min <- 10e10
for (i in keys){
if(hash[[i]] < min){
min <- hash[[i]]
}
}
result <- c(keys(min), min)
return(result)
}
#input number
number <- "4673123456"
result <- hello(number, hash, names)
result
pattern <-  paste('^', "46", "7", "+\\d","-", "A", sep = "")
index = grep(pattern, keys, perl = T)
index
library('hash')
source('R/functions.R')
#list of all price lists
#Operator A data
operatorA <- data.frame(prefix = c(1, 268, 46, 4620, 468, 4631, 4673, 46732), rate = c(0.9, 5.1, 0.17, 0.0, 0.15, 0.15,0.9, 1.1))
operatorA$operator <- c(rep("A", nrow(operatorA)))
#operator B data
operatorB <- data.frame(prefix = c(1, 44, 46, 467, 48), rate = c(0.92, 0.5, 0.2, 1.0, 1.2))
operatorB$operator <- c(rep("B", nrow(operatorB)))
#list of all price lists
operatorsList <- rbind(operatorA,operatorB)
names <- c("A", "B")
#hash table
hash <- hash(keys = paste(operatorsList$prefix, operatorsList$operator, sep = "-") , values = operatorsList$rate)
keys <- keys(hash)
pattern <-  paste('^', "46", "7", "+\\d","-", "A", sep = "")
index = grep(pattern, keys, perl = T)
index
keys[index]
pattern <-  paste('^', "46", "+\\d","-", "A", sep = "")
index = grep(pattern, keys, perl = T)
keys[index]
pattern <-  paste('^', "46", "+\d","-", "A", sep = "")
pattern <-  paste('^', "46", "\\.","-", "A", sep = "")
index = grep(pattern, keys, perl = T)
keys[index]
pattern <-  paste('^', "46", "\\+D","-", "A", sep = "")
index = grep(pattern, keys, perl = T)
keys[index]
pattern <-  paste('^', "46", ".\\d","-", "A", sep = "")
index = grep(pattern, keys, perl = T)
keys[index]
pattern <-  paste('^', "46", ".\\\d","-", "A", sep = "")
index = grep(pattern, keys, perl = T)
pattern <-  paste('^', "46", ".\\d","-", "A", sep = "")
index = grep(pattern, keys, perl = T)
keys[index]
pattern <-  paste('^', "46", "+.\\d","-", "A", sep = "")
index = grep(pattern, keys, perl = T)
keys[index]
pattern <-  paste('^', "46", "+.\\dd","-", "A", sep = "")
index = grep(pattern, keys, perl = T)
keys[index]
pattern <-  paste('^', "46", "+.","-", "A", sep = "")
index = grep(pattern, keys, perl = T)
keys[index]
pattern <-  paste('^', "46", "+..","-", "A", sep = "")
index = grep(pattern, keys, perl = T)
keys[index]
pattern <-  paste('^', "46", "+d","-", "A", sep = "")
index = grep(pattern, keys, perl = T)
keys[index]
pattern <-  paste('^', "46", "+.","-", "A", sep = "")
index = grep(pattern, keys, perl = T)
keys[index]
pattern <-  paste('^', "46", ".","-", "A", sep = "")
index = grep(pattern, keys, perl = T)
keys[index]
pattern <-  paste('^', "46", "+\\d","-", "A", sep = "")
index = grep(pattern, keys, perl = T)
keys[index]
pattern <-  paste('^', "46", "+\\.","-", "A", sep = "")
index = grep(pattern, keys, perl = T)
keys[index]
pattern <-  paste('^', "46", "\d","-", "A", sep = "")
pattern <-  paste('^', "46", "+\d","-", "A", sep = "")
pattern <-  paste('^', "46", "\\d","-", "A", sep = "")
index = grep(pattern, keys, perl = T)
keys[index]
pattern <-  paste('^', "46", "\\d+","-", "A", sep = "")
index = grep(pattern, keys, perl = T)
keys[index]
pattern <-  paste('^', "44", "\\d+","-", "B", sep = "")
index = grep(pattern, keys, perl = T)
keys[index]
source('C:/Users/Amine/Desktop/Assignment/assignment/R/dataFactory.R')
source('C:/Users/Amine/Desktop/Assignment/assignment/R/dataFactory.R')
source('C:/Users/Amine/Desktop/Assignment/assignment/R/dataFactory.R')
source('C:/Users/Amine/Desktop/Assignment/assignment/R/dataFactory.R')
source('C:/Users/Amine/Desktop/Assignment/assignment/R/dataFactory.R')
source('C:/Users/Amine/Desktop/Assignment/assignment/R/dataFactory.R')
source('C:/Users/Amine/Desktop/Assignment/assignment/R/dataFactory.R')
# runTests.R ---------------------------
#Running tests for :
#     - functions.R
#     - Routing.R
library("RUnit")
library("testthat")
source('R/functions.R')
source('R/routing.R')
# -- Defining test suites and showing testresults
# testing functions.R
testSuite.functions <- defineTestSuite(name = "functions test suite", dirs = file.path("tests"),testFileRegexp = "test_functions.R")
testResult.functions <- runTestSuite(testSuite.functions)
printTextProtocol(testResult.functions)
#testing routing.R
testSuite.routing <- defineTestSuite(name = "routing test suite", dirs = file.path("tests"),testFileRegexp = "test_routing.R")
testResult.routing <- runTestSuite(testSuite.routing)
printTextProtocol(testResult.routing)
source('R/functions.R')
source('R/routing.R')
# ~~~~~~~~~~~~~~~~~~~~~~~~~~ SETUP START ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# The setup portion of this demo will execute steps would happen organically in
# the course this assignment.
# steps are:
#
# - get the price lists data in data frames
# - name the data frames according to the operator
# - aggregate the data frames in a list (operatorList)
# The test file would normally reside in "<packagedir>/tests/unitizer",
#Operator A data
operatorA <- data.frame(prefix = c(1, 268, 46, 4620, 468, 4631, 4673, 46732), rate = c(0.9, 5.1, 0.17, 0.0, 0.15, 0.15,0.9, 1.1))
operatorA$operator <- c(rep("A", nrow(operatorA)))
#operator B data
operatorB <- data.frame(prefix = c(1, 44, 46, 467, 48), rate = c(0.92, 0.5, 0.2, 1.0, 1.2))
operatorB$operator <- c(rep("B", nrow(operatorB)))
#list of all price lists
operatorsList <- list(operatorA,operatorB)
# - The number is inputted in a format "68123456789" according to the assignment
# - The prefix, countryCode and areaCode are extracted using the helper fucntions in functions.R
#input number and finding country and area
input <- "462123456"
#getting country and area codes
# The operator with the cheapest pricing is outputted in a string with the different details
output <- cheapestRoute(input, operatorsList)
operator <- output$operator
rate <- output$rate
paste("The cheapest operator for the number +", input, " is operator: ", operator, " with a rate of:", rate, " Kr./min", sep = "")
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ DEMO OVER :D ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
input <- "4673123456"
source('R/functions.R')
source('R/routing.R')
# ~~~~~~~~~~~~~~~~~~~~~~~~~~ SETUP START ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# The setup portion of this demo will execute steps would happen organically in
# the course this assignment.
# steps are:
#
# - get the price lists data in data frames
# - name the data frames according to the operator
# - aggregate the data frames in a list (operatorList)
# The test file would normally reside in "<packagedir>/tests/unitizer",
#Operator A data
operatorA <- data.frame(prefix = c(1, 268, 46, 4620, 468, 4631, 4673, 46732), rate = c(0.9, 5.1, 0.17, 0.0, 0.15, 0.15,0.9, 1.1))
operatorA$operator <- c(rep("A", nrow(operatorA)))
#operator B data
operatorB <- data.frame(prefix = c(1, 44, 46, 467, 48), rate = c(0.92, 0.5, 0.2, 1.0, 1.2))
operatorB$operator <- c(rep("B", nrow(operatorB)))
#list of all price lists
operatorsList <- list(operatorA,operatorB)
# - The number is inputted in a format "68123456789" according to the assignment
# - The prefix, countryCode and areaCode are extracted using the helper fucntions in functions.R
#input number and finding country and area
input <- "4673123456"
#getting country and area codes
# The operator with the cheapest pricing is outputted in a string with the different details
output <- cheapestRoute(input, operatorsList)
operator <- output$operator
rate <- output$rate
paste("The cheapest operator for the number +", input, " is operator: ", operator, " with a rate of:", rate, " Kr./min", sep = "")
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ DEMO OVER :D ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
input <- "45123456"
source('R/functions.R')
source('R/routing.R')
# ~~~~~~~~~~~~~~~~~~~~~~~~~~ SETUP START ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# The setup portion of this demo will execute steps would happen organically in
# the course this assignment.
# steps are:
#
# - get the price lists data in data frames
# - name the data frames according to the operator
# - aggregate the data frames in a list (operatorList)
# The test file would normally reside in "<packagedir>/tests/unitizer",
#Operator A data
operatorA <- data.frame(prefix = c(1, 268, 46, 4620, 468, 4631, 4673, 46732), rate = c(0.9, 5.1, 0.17, 0.0, 0.15, 0.15,0.9, 1.1))
operatorA$operator <- c(rep("A", nrow(operatorA)))
#operator B data
operatorB <- data.frame(prefix = c(1, 44, 46, 467, 48), rate = c(0.92, 0.5, 0.2, 1.0, 1.2))
operatorB$operator <- c(rep("B", nrow(operatorB)))
#list of all price lists
operatorsList <- list(operatorA,operatorB)
# - The number is inputted in a format "68123456789" according to the assignment
# - The prefix, countryCode and areaCode are extracted using the helper fucntions in functions.R
#input number and finding country and area
input <- "45123456"
#getting country and area codes
# The operator with the cheapest pricing is outputted in a string with the different details
output <- cheapestRoute(input, operatorsList)
operator <- output$operator
rate <- output$rate
paste("The cheapest operator for the number +", input, " is operator: ", operator, " with a rate of:", rate, " Kr./min", sep = "")
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ DEMO OVER :D ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
input <- "4673123456"
source('R/functions.R')
source('R/routing.R')
# ~~~~~~~~~~~~~~~~~~~~~~~~~~ SETUP START ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# The setup portion of this demo will execute steps would happen organically in
# the course this assignment.
# steps are:
#
# - get the price lists data in data frames
# - name the data frames according to the operator
# - aggregate the data frames in a list (operatorList)
# The test file would normally reside in "<packagedir>/tests/unitizer",
#Operator A data
operatorA <- data.frame(prefix = c(1, 268, 46, 4620, 468, 4631, 4673, 46732), rate = c(0.9, 5.1, 0.17, 0.0, 0.15, 0.15,0.9, 1.1))
operatorA$operator <- c(rep("A", nrow(operatorA)))
#operator B data
operatorB <- data.frame(prefix = c(1, 44, 46, 467, 48), rate = c(0.92, 0.5, 0.2, 1.0, 1.2))
operatorB$operator <- c(rep("B", nrow(operatorB)))
#list of all price lists
operatorsList <- list(operatorA,operatorB)
# - The number is inputted in a format "68123456789" according to the assignment
# - The prefix, countryCode and areaCode are extracted using the helper fucntions in functions.R
#input number and finding country and area
input <- "4673123456"
#getting country and area codes
# The operator with the cheapest pricing is outputted in a string with the different details
output <- cheapestRoute(input, operatorsList)
operator <- output$operator
rate <- output$rate
paste("The cheapest operator for the number +", input, " is operator: ", operator, " with a rate of:", rate, " Kr./min", sep = "")
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ DEMO OVER :D ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# runTests.R ---------------------------
#Running tests for :
#     - functions.R
#     - Routing.R
library("RUnit")
library("testthat")
source('R/functions.R')
source('R/routing.R')
# -- Defining test suites and showing testresults
# testing functions.R
testSuite.functions <- defineTestSuite(name = "functions test suite", dirs = file.path("tests"),testFileRegexp = "test_functions.R")
testResult.functions <- runTestSuite(testSuite.functions)
printTextProtocol(testResult.functions)
#testing routing.R
testSuite.routing <- defineTestSuite(name = "routing test suite", dirs = file.path("tests"),testFileRegexp = "test_routing.R")
testResult.routing <- runTestSuite(testSuite.routing)
printTextProtocol(testResult.routing)
source('C:/Users/Amine/Desktop/Assignment/assignment/R/dataFactory.R')
